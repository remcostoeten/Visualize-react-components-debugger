{"version":3,"sources":["../src/index.ts","../src/VisualizeComponent.tsx"],"sourcesContent":["require('dotenv').config();\n\nimport React from 'react';\nimport { VisualizeComponent as DevVisualizeComponent } from './VisualizeComponent';\n\nconst VisualizeComponent = process.env.NODE_ENV === 'production' ? React.Fragment : DevVisualizeComponent;\n\nexport default VisualizeComponent;","'use client'\nimport React, { ReactNode, useEffect, useState } from \"react\";\n\nconst devMode = process.env.NODE_ENV !== 'production'\n\ntype visualizeProps = {\n    showAlert?: boolean,\n    children?: ReactNode,\n    componentName?: string,\n    width?: string,\n    color?: string,\n    borders?: 'dashed' | 'solid',\n    invert?: boolean\n}\n\ninterface JSXElements {\n    [key: string]: any;\n}\n\nexport const VisualizeComponent = ({ borders = 'dashed', showAlert = false, children, width = '10px', color = 'red', invert = false }: visualizeProps) => {\n    const [showToast, setShowToast] = useState(false);\n\n    if (!devMode) {\n        return <>{children}</>;\n    }\n\n    const toastAlert = () => {\n        return (\n            <div\n                style={{\n                    position: 'fixed',\n                    bottom: '20px',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    padding: '20px 55px 20px 20px',\n                    backgroundColor: invert ? 'white' : '#090909',\n                    color: invert ? '#090909' : 'rgb(240 3.7% 15.9%)',\n                    borderRadius: '8px',\n                    border: '1px solid rgb(240 3.7% 15.9%)',\n                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n                    zIndex: 9999,\n                }}\n            >\n                Component is mounted!\n                <button\n                    style={{\n                        position: 'absolute',\n                        top: '21px',\n                        right: '20px',\n                        background: 'none',\n                        border: 'none',\n                        cursor: 'pointer',\n                        zIndex: 9999,\n                        color: invert ? '#090909' : 'rgb(240 3.7% 15.9%)',\n                    }}\n                    onClick={() => setShowToast(false)}\n                >\n                    <svg\n                        xmlns='http://www.w3.org/2000/svg'\n                        width='24'\n                        height='24'\n                        version='1.1'\n                        viewBox='0 0 26 26'\n                        xmlSpace='preserve'\n                    >\n                        <path\n                            fill={invert ? 'rgb(240 3.7% 15.9%)' : '#fff'}\n                            d='M21.125 0H4.875A4.874 4.874 0 000 4.875v16.25A4.874 4.874 0 004.875 26h16.25A4.874 4.874 0 0026 21.125V4.875A4.874 4.874 0 0021.125 0zM18.78 17.394l-1.388 1.387a.654.654 0 01-.924 0L13 15.313 9.533 18.78a.653.653 0 01-.925-.002L7.22 17.394a.66.66 0 010-.926l3.468-3.467-3.467-3.467a.657.657 0 010-.925l1.388-1.388a.651.651 0 01.925 0L13 10.689l3.468-3.468a.65.65 0 01.924 0l1.388 1.386a.66.66 0 01.001.927l-3.468 3.467 3.468 3.467a.66.66 0 01-.001.926z'\n                        ></path>\n                    </svg>\n                </button>\n            </div>\n        );\n    }\n\n    useEffect(() => {\n        if (showAlert) {\n            setShowToast(true);\n        }\n    }, [showAlert]);\n\n    return (\n        <div style={{ outline: `${width} ${borders} ${color}` } as JSXElements}>\n            {children}\n            {showAlert && showToast && toastAlert()}\n        </div>\n    );\n}\n\nexport default VisualizeComponent;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAAA,gBAAkB;;;ACDlB,mBAAsD;AAsBvC;AApBf,IAAM,UAAU,QAAQ,IAAI,aAAa;AAgBlC,IAAM,qBAAqB,CAAC,EAAE,cAAc,UAAU,YAAY,OAAO,UAAU,QAAQ,QAAQ,QAAQ,OAAO,SAAS,MAAM,MAAsB;AAC1J,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,KAAK;AAEhD,MAAI,CAAC,SAAS;AACV,WAAO,2EAAG,UAAS;AAAA,EACvB;AAEA,QAAM,aAAa,MAAM;AACrB,WACI;AAAA,MAAC;AAAA;AAAA,QACG,OAAO;AAAA,UACH,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,WAAW;AAAA,UACX,SAAS;AAAA,UACT,iBAAiB,SAAS,UAAU;AAAA,UACpC,OAAO,SAAS,YAAY;AAAA,UAC5B,cAAc;AAAA,UACd,QAAQ;AAAA,UACR,WAAW;AAAA,UACX,QAAQ;AAAA,QACZ;AAAA,QACH;AAAA;AAAA,UAEG;AAAA,YAAC;AAAA;AAAA,cACG,OAAO;AAAA,gBACH,UAAU;AAAA,gBACV,KAAK;AAAA,gBACL,OAAO;AAAA,gBACP,YAAY;AAAA,gBACZ,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,OAAO,SAAS,YAAY;AAAA,cAChC;AAAA,cACA,SAAS,MAAM,aAAa,KAAK;AAAA,cAEjC;AAAA,gBAAC;AAAA;AAAA,kBACG,OAAM;AAAA,kBACN,OAAM;AAAA,kBACN,QAAO;AAAA,kBACP,SAAQ;AAAA,kBACR,SAAQ;AAAA,kBACR,UAAS;AAAA,kBAET;AAAA,oBAAC;AAAA;AAAA,sBACG,MAAM,SAAS,wBAAwB;AAAA,sBACvC,GAAE;AAAA;AAAA,kBACL;AAAA;AAAA,cACL;AAAA;AAAA,UACJ;AAAA;AAAA;AAAA,IACJ;AAAA,EAER;AAEA,8BAAU,MAAM;AACZ,QAAI,WAAW;AACX,mBAAa,IAAI;AAAA,IACrB;AAAA,EACJ,GAAG,CAAC,SAAS,CAAC;AAEd,SACI,6CAAC,SAAI,OAAO,EAAE,SAAS,GAAG,KAAK,IAAI,WAAW,IAAI,KAAK,GAAG,GACrD;AAAA;AAAA,IACA,aAAa,aAAa,WAAW;AAAA,KAC1C;AAER;;;ADvFA,QAAQ,QAAQ,EAAE,OAAO;AAKzB,IAAMC,sBAAqB,QAAQ,IAAI,aAAa,eAAe,cAAAC,QAAM,WAAW;AAEpF,IAAO,cAAQD;","names":["import_react","VisualizeComponent","React"]}